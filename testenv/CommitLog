Detailed explanations on the working of each commit.

This file will remain only on the working branch of the development and will not be copied
into the release commits.

The CommitLog file will follow the same conventions as the GNU ChangeLog files.

2013-07-30  Darshit Shah  <darnir@gmail.com>

	* TestEnv.py (parse_files): Read new metadata value, exists. This not
	only creates the file locally, but instructs Wget not to download it.
	Optimized reading content and storing in dict.
	(parse_server_rules): Improve visual formatting of dict.
	(test_downloaded_files): More verbose errors
	* Test-ftp-bad-list): Use metadata exists instead of crude continue
	hack

2013-07-29  Darshit Shah  <darnir@gmail.com>

	* FTPServer.py: Import pyftpdlib.handlers completely into the
	namespace. We will override the required functions.
	(FTPDHandler): Inherits FTPHandler. Contains the overriden methods for
	handling the Test Server.
	(ftp_LIST): Override method to handle case when a global server rule
	to send a bad list is set.
	(FTPDServer): Inherits FTPServer, contains a method for setting the
	server rules.
	(FTPd.__init__): Change directory in time for the TestEnv to set up
	its structure
	(mk_file_sys): chdir to server since we added a chdir .. earlier.
	* TestEnv.py (init_server): Parse global server rules too.
	(set_bad_list): Return object to set the bad-List flag
	(parse_global_rules): Parse global rules, much like the file-level
	rules
	(get_cmd_file): In case no file is set for downloading, add
	localhost:port/ as the default URL

2013-07-23  Darshit Shah  <darnir@gmail.com>

	* TestEnv.py: Fix regression that caused certain redirects to fail.

2013-07-22  Darshit Shah  <darnir@gmail.com>


	* HTTPServer.py (send_head): Fix regression that prevented the 404
	Status from being returned correctly.

2013-07-21  Darshit Shah  <darnir@gmail.com>

	* FTPServer.py: (newfile)
	This file handles connecting to a pyftpd server and other related
	tasks.
	(FTPd): A threaded FTP Server.
	* TestEnv.py: Import FTPServer and FTP (FTPServer) into namespace.
	(init_server): Call the respective protocols init method.
	(stop_server): Call the respective protocols stop method.
	(init_HTTP_server): domain names are generated in a separate function.
	(init_FTP_server): Make a connection to the FTP Server and intialize
	the directory structure.
	(stop_HTTP_server): Kill the HTTP Server.
	(stop_FTP_server): Stop the FTP Server.
	(append_downloads): Add the protocol in front of the URL.
	(gen_domain_name): Generate the domain name given the address tuple.
	* Test-ftp: New test for basic FTP connectivity.
	* Test-auth-basic: Add attribute server to WgetTest Element.

2013-07-18  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py (server_conf): Change server_configs to be an object
	variable instead of a global variable.
	(do_POST): server_configs is now an object variable of the server.
	(do_PUT): Same
	(send_head): Same
	* TestEnv.py (Test.__init__): Split print statement to two lines to
	prevent exceeding 80 char lines.
	(parse_files): Same
	(parse_server_rules): Same
	(_gen_expected_files): Same
	(test_return_code): Rename expected_return_code to expected_ret_code
	(get_auth): Split statement to two lines
	(append_downloads): Use a ternary conditional instead of if-else.
	(test_downloaded_file): Inly test a file if it is in the parent
	directory.
	* runTest.py: Add docstrings and comments

2013-07-14  Darshit Shah  <darnir@gmail.com>

	* runTest.py: Use argparse to parse commandline arguments.
	Two new un-documented arguments. only-server will spawn the server
	with the specified rules and sleep for 10,000 seconds allowing one to
	access the server separately for debugging  purposes.
	external allows to specify the path to an external executable of Wget
	* Test-auth-basic: Ensure that Wget registers the authorization and
	does not re-negotiate it.

2013-07-14  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py (send_challenge): Split generation of challenge string
	to two lines.

2013-07-13  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py: Import method md5 from hashlib for Digest Auth.
	(is_auth): Method deleted. Refactored into is_authorized
	(send_challenge): Send a www-Authenticate Challenge to the client
	(authorize_Basic): Handle Basic Authentication.
	(parse_auth_header): Parse the authorization header for Digest Auth.
	(KD): Apply Digest Algorithm to data with secret.
	(H): Apply checksum algorithm to data.
	(A1): username:realm:password
	(A2): method:uri
	(check_response): Check if response attribute in Digest Auth matches.
	(authorize_Digest): Handle Digest Access Authentication
	(is_authorized): Handle HTTP Auth.

2013-07-13  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py (get_rule_list): Return a list of the file-level
	rules.
	(send_cust_headers): Use get_rule_list instead of calling directly
	(test_cookies): Same
	(custom_response): Same
	(is_auth): Same
	(expect_headers): Same

2013-07-12  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py (is_auth): Handle RFC 2067 Digest Authentication

2013-07-12  Darshit Shah  <darnir@gmail.com>

	* TestEnv.py (append_downloads): Add User and Pass named parameters
	for inURL handling.
	(get_auth): Handle InURL Calls.

2013-07-12  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py (is_auth): In case, authentication fails, respond with
	another 401 and WWW-Authenticate Header, instead of a 403. This
	matched with RFC 2617

2013-07-12  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py (WgetHTTPRequestHandler): Create list of tests
	(custom_response): Negate return value to better match other similar
	functions
	(do_POST): Edit test on custom_response to account for negated return
	(do_PUT): Same
	(send_head): Dynamically call all tests in self.tests

2013-07-11  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py (expect_headers): Test if an expected Header line is
	foud in the Request Headers. Else, return a 400 and exit.
	(send_head): Call expect_headers.
	* TestEnv.py (parse_server_rules): Accept "Expected Header" command.
	(get_expected_header): Generate a expected Header object
	* Makefile.am: Add new auth based tests

2013-07-11  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py: Import b64encode from base64 module for Simple HTTP
	Auth.
	(is_auth): If Auth Rules are set, follow them and check for correct
	Authorization Header.
	* TestEnv.py (Auth): Class for handling Authentication mechanisms.
	(get_auth): Create Auth objects for Server Rules.
	(parse_server_rules): Parse server rule command Auth.

2013-07-10  Darshit Shah  <darnir@gmail.com>

	* runTest.py: Remove un-necessary imports. Remove wildcard import on
	TestEnv.
	Rename constants according to convention (Uppercase).

2013-07-09  Darshit Shah  <darnir@gmail.com>

	* Test-cookie-401: New Test File. Server returns a 401 Forbidden.
	* Test-cookie-domain-mismatch: New Test File. Test Wget when Cookie
	tries to set a different domain.
	* Test-cookie-expire: New Test File. Test if Wget will discard old,
	expired cookies.

2013-07-09  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py (check_cookies): Use send_response () instead of
	send_error (). send_error () closes the connection on its own.

2013-07-08  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py (handle_redirects): Delete method. This is no longer
	required since the redirects are implicitly handled as custom response
	and custom headers.
	* TestEnv.py: No need to import http.cookies. We do not use it.

2013-07-07  Darshit Shah  <darnir@gmail.com>

	* Major change. File/function level changes are too many to figure.

2013-07-02  Darshit Shah  <darnir@gmail.com>

	* README (Writing New Tests): Edit section to reflect changes in
	parse_server_rules () method.
	* README.testfile: Document the Cookie command

2013-07-02  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py: More verbose errors. Send Descriptive messages with
	400 Response Codes.
	* TestEnv.py: More verbose errors. Edit TestFailed exception to take
	an error string.
	* runTest.py: Print the error string from TestFailed

2013-07-02  Darshit Shah  <darnir@gmail.com>

	* Makefile.am: Add new tests
	* Test-Header: Add missing ExpectedFile

2013-07-02  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py (test_cookies): New method. Test whether the expected
	cookies are recieved in the request.
	(send_HEAD): If test_cookies () returns False, send a 400 Bad Request
	and exit.
	* TestEnv.py (Cookie): Class for handling expected Cookies.
	(set_cookie): New Method. Set a custom header for Sending the required
	Cookie headers. Create a new Cookie object for expected cookies.
	* Test-cookie: Basic test for checking cookie support.

2013-07-02  Darshit Shah  <darnir@gmail.com>

	* TestEnv.py (Cust_Header): Accept an optional parameter, filen. IF
	this parameter is set, the header will be sent only when the request
	path is filen. Else to all requests.
	(set_header): Formatting changes.
	(set_cont_disp): Send the filename parameter too.
	* HTTPServer.py (send_cust_headers): Handle header rules as explained
	above

2013-07-01  Darshit Shah  <darnir@gmail.com>

	* runTest.py: Place init_server () in try-except block

2013-07-01  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py (mk_file_sys): Delete Method. Function merged into
	server_conf ()
	(server_conf): Now accept filelist and set it as fileSys.
	* TestEnv.py (start_server): Method deleted. Function merged into
	init_server ()
	(spawn_server): Same.
	(init_server): Start the server, generate the filelist and
	server_rules and send them to the server. Then spawn the server.
	The domain name is now read from server_address instead of hard-coding
	it as 'localhost'. domain is now an object variable instead of global
	variable and server is only a local variable.
	(stop_server): Reference the object variable domain
	(gen_file_list): Use shorthand operator to make code more readable. We
	do not set the filesystem from here anymore. This will be sent to the
	server through init_server ()
	(set_post): Reference to object variable domain
	(set_put): Same
	(parse_server_rules): Se do not set the server_rules from here. This
	is now done my init_server ()
	* runTest.py: Import module os.path into namespace.
	Use os.path.join to correctly construct the path on all operating
	systems.
	Remove references to start_server (), gen_file_list (),
	parse_server_rules () and spawn_server (). These are now replaced by a
	single call to init_server ().


2013-06-30  Darshit Shah  <darnir@gmail.com>

	* TestEnv.py (parse_server_rules): Use a commands_list dict and call
	the respective functions to handle them.

2013-06-30  Darshit Shah  <darnir@gmail.com>

	* TestEnv.py (parse_special): Renamed to parse_server_rules. Change
	Element tag to ServerRule.
	* runTest.py: Change method call to parse_server_rules ()
	* Test-Content-Disposition: Change Element 'Special' to 'ServerRule'
	* Test-Header: Same
	* Test-Post{,2,3}: Same
	* Test-Put: Same
	* Test-c-{None,full,partial}: Same
	* Test-redirect: Same

2013-06-30  Darshit Shah  <darnir@gmail.com>

	* README: Add information on XFAIL_TEST and XPASS_TEST.
	Change Required version of Python to 3.2

2013-06-30  Darshit Shah  <darnir@gmail.com>

	* TestEnv.py (Content_Disp): Class deleted
	(parse_special): Content Disposition is now an alias to set a Custom
	Header. This allows for greater code reuse.
	* HTTPServer.py (send_cust_headers): New method. Send custom headers
	after reading server configs.
	(finish_headers): Move code to send_cust_headers ().
	(send_content_disposition_header): Remove function.
	(send_HEAD): Do not call send_content_disposition_header() any more.
	Content-Disposition headers will be sent when finish_headers() is
	called.

2013-06-29  Darshit Shah  <darnir@gmail.com>
	* runTest.py: Parse Errors and file not founds are Hard Errors. Return
	code 99 for them.

2013-06-29  Darshit Shah  <darnir@gmail.com>

	* README (Working): Do not mention the exit status here.
	(Exit Codes): State the exit status codes for runTest.

2013-06-29  Darshit Shah  <darnir@gmail.com>

	* README (Environment Variable): Document the NO_CLEANUP variable.
	(Working): Minor editing.

2013-06-28  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py (serve_forever): Correct typo.
	(do_QUIT): Use correct Queue variable

2013-06-28  Darshit Shah  <darnir@gmail.com>

	* Makefile.am: Remove a trailing escape character that caused all
	tests to fail.

2013-06-28  Darshit Shah  <darnir@gmail.com>

	* Makefile.am: Certain issues have been fixed in origin/master. Hence
	those tests are no longer XFAIL.

2013-06-28  Darshit Shah  <darnir@gmail.com>

	* Makefile.am: Add copyright notice. Add new Test Files.
	* README: Add File List, Working, Writing New Test Files sections
	Change requirement to Automake >= 1.12
	* README.testfile: Lists all the elements and their corresponding
	attributes that are used in writing the Test Files

2013-06-27  Darshit Shah  <darnir@gmail.com>

	* TestEnv.py (parse_special): Accept a new Special Element, Header.
	This element is used to specify custom headers that will be used in
	the responses sent by the Server.
	* HTTPServer.py: Same. Replace all calls to end_headers () with
	finsih_headers () which first writes all the custom headers and then
	calls end_headers ().
	Since Python writes these headers as a List, there is no redundancy
	checking and Headers cannot be overriden. Also, there is a currently a
	known bug where sending an extra Content-Length Header causes a
	deadlock somewhere. Not all headers cause this, but the exact headers
	causing this is yet unknown

2013-06-26  Darshit Shah  <darnir@gmail.com>

	* TestEnv.py (parse_special): Make the "Bytes" sub-element optional.
	* HTTPServer.py (parse_range_header): Send a 416 Range Not Satisfiable
	even when requested range is equal to file size. Also capitalize O in
	Range Overflow. This prevented the Exception from being processed
	correctly in send_HEAD().

2013-06-26  Darshit Shah  <darnir@gmail.com>

	* TestEnv.py (__init__): Test if the input file begins with a WgetTest
	Element. This element is compulsory for identification of Test Files.
	Also, print a line in, Blue with the name of the Test File we are
	executing.
	* runTest.py: Skipped tests are printed in Yellow

2013-06-26  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py (spawn_server): Create a Multiprocessing Queue and
	pass it to the new child process. This queue is used to retrieve the
	updated filesystem dictionary from the Server process for validation
	purposes in TestEnv.
	(ret_fileSys): Called from TestEnv.stop_server() to return the fileSys
	dictionary. The Queue.get() method is passed the attribute True, to
	ensure that it blocks the process till something is written to the
	Queue. This is done, since we are expecting some data to be in the
	Queue with full surety.
	(do_QUIT): Write the fileSys dict to the Queue.
	(serve_forever): Generate a global Queue object that can later be used
	by do_QUIT
	(do_POST): Edit the filesystem data too when appending the body_data
	to the original file. This fixes an expected failure in Test-Post
	* TestEnv.py (stop_server): Call HTTPServer.ret_fileSys() just after
	sending the QUIT command but before reading the response. This ensures
	that the server process doesn't die before the data in the Queue is
	read. This is enfirced by making the call to Queue.get() a blocking
	call.
	(test_expected_files): Use the modified fileSys dictionary instead of
	the original file_list dict.

2013-06-24  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py (do_PUT): Add support for PUT Command. Ensure the
	command is idempotent by simply replacing the file if it exists with
	the data sent by the client. Else create a new file with that data.
	* TestEnv.py (parse_special): Same

2013-06-24  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py (do_POST): If redirection required, handle it and
	return. This saves one level of indentation. Also, add support for
	when the requested URI does not exist. Create a new one with the
	contents given in body-data.

2013-06-24  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py (do_POST): Replace old boilerplate code. In
	Content-Length does not exist, respond with a 400 Invalid Request and
	exit. If the URI exists on the server, take the contents of the file,
	append the Body-data to it and return the file to the client with a
	200 OK. Else, return a 201 Created. The code for handling File
	creation is to be written.
	* TestEnv.py (parse_special): Handle special command, POST.
	(get_cmd_line): Method commands may also specify URI which are not in
	the Filesystem, but are to be created. Add these URIs to invokation
	list.
	* Makefile.am (TESTS): Add Test-Post and Test-Post2.
	(XFAIL_TESTS): Both Test-Post and Test-Post2 are expected to fail.
	Test_Post fails since Wget does not read and save the Body content
	sent with the response.
	Test_Post2 fails since Wget does not send a Content-Length=0 Header
	when the Body Data is empty.

2013-06-23  Darshit Shah  <darnir@gmail.com>

	* TestEnv.py (parse_special): Change semantics of "Special" element.
	This is done so as to create more clear and better formatted Test
	Files.
	* Test-Content-disposition: Edit Test Files to be compliant with the new semantics of
	Special.
	* Test-c-partial: Same
	* Test-redirect: Same

2013-06-23  Darshit Shah  <darnir@gmail.com>

	* runTest.py: Parse errors in Test Case files now result in a skipped
	test (77) rather than a Hard Error (99). Hard errors will be used for
	Exceptions raised in the internal code, e.g. the Servers.

2013-06-22  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py (server_vars): Remove function
	(server_conf): Get the configuration dict. and store as a global
	variable.
	(send_redirection): Remove function
	(handle_redirects): Accept the path of the file and check whether a
	redirect rule exists. If so, send the redirection headers and return
	True. Else, return False.
	(send_content_disposition_header): Check of a rule exists for sendign
	content-disposition headers. If so, send the relevent header
	(send_head): Reduce processing. Assign that load to the respective
	methods.
	(set_server_rules): Remove function
	* Test-Content-Disposition: Add attribute "file" to identify filename to
	which to apply the header.
	* TestEnv.py (parse_special): Rework function to be more pythonic and
	readable. Create a list of similar Special Rules and store them in a
	dictionary. Send this dictionary to HTTPServer.server_conf()
	(Class Redirect): Stores attributes of Redirection Requests
	(Class Content_Disp): Stores attributes of Content-Disposition Headers
	to send.

2013-06-21  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py: Define new function server_vars () that does the job
	of the set_server_rules funtion earlier.
	(set_server_rules): Comment out all the actions. Kept around for
	safekeeping currently.
	(send_HEAD): Send Content-Disposition header if required.
	* TestEnv.py (parse_special): Support Content-Disposition headers.

2013-06-21  Darshit Shah  <darnir@gmail.com>

	* Makefile.am: Add AUTOMAKE_OPTION parallel-tests to ensure the
	parallel test harness is used on Automake v1.12

2013-06-20  Darshit Shah  <darnir@gmail.com>

	* README: Add Automake >= 1.13 as a requirement. This is because the
	parallel test harness being used was made default only in v1.13. And
	my efforts to make in work in v1.12 have been unsuccessful so far.

2013-06-20  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py (InvalidRangeHeader): Define new exception that is
	raised during processing of the Range Header
	(parse_range_header): Parse the Range Header. Returns None if the
	Range header does not exist, else will return the starting offset.
	This function can only parse the "bytes %d-" style headers which Wget
	sends. Support for other valid header formats is not implemented.
	(do_GET): send_HEAD method now returns two objects. Accept the offset
	bytes from which to start serving the file.
	(send_HEAD): Accept the output of parse_range_header() and send the
	appropriate headers back.
	* TestEnv.py (parse_special): Support new special command, Continue.
	It reads the offset bytes from the Test file and creates a new file by
	the name specified in the while with the same number of bytes.
	Currently, this function does not support the use of -O and -c
	together since it does not lookup the original file name from the list
	when reading the file content.
	* Test-c-partial: (newfile)
	Test file to check if Wget handles partially completed files
	correctly.

2013-06-20  Darshit Shah  <darnir@gmail.com>

	* Test-redirect: Edit redirection semantics. Bring it under Special
	Commands.
	* TestEnv.py (parse_special): Reflect change in semantics in parser

2013-06-20  Darshit Shah  <darnir@gmail.com>

	* TestEnv.py (_test_cleaup): Do not delete test files if NO_CLEANUP
	variable is set.

2013-06-20  Darshit Shah  <darnir@gmail.com>

	* TestEnv.py (_test_extra_files): Function deleted
	(test_downloaded_files): Function run optimized. Cleaner code. Merged
	function of _test_extra_files() too.

2013-06-19  Darshit Shah  <darnir@gmail.com>

	* Makefile.am: Add Test-Head to list of tests. This could only be done
	after merging the latest commit in master.
	* Test-Head: Add a test to ensure Wget sends a HEAD request correctly
	with --method=head

2013-06-18  Darshit Shah  <darnir@gmail.com>

	* Makefile.am: Add Test-redirect to list of tests
	* Test-redirect: Add a test to ensure Wget handles server redirects
	correctly.

2013-06-18  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py (set_server_rules): Accept various information for
	configuring the server.
	(send_redirection): Handle sending redirect requests
	(send_HEAD): Test if redirection is necessary and act appropriately
	(send_POST): Samie
	* TestEnv.py (parse_special): Parse special requests from the Test
	File. Currently it only supports reading Redirection requests

2013-06-18  Darshit Shah  <darnir@gmail.com>

	* runTest.py: Exit driver module with highest exit status.
	  0  Successful
	 77  Skipped Test
	 99  Hard Error (Error in Test Suite, not Wget)
	100  Test Failed
	These exit numbers are teken from the automake documentation.

2013-06-18  Darshit Shah  <darnir@gmail.com>

	* ColourTerm.py: Fix indentation to 3 spaces. Follow GNU Coding Style
	better.
	* HTTPServer.py: Same
	* TestEnv.py: Same
	* runTest.py: Same

2013-06-18  Darshit Shah  <darnir@gmail.com>

	* runTest.py: Change shebang line to python3
	* HTTPServer.py: Remove shebang line. Change chmod mask to 644. This
	file will not be executed directly.
	* ColourTerm.py: Change chmod mask to 644. This file will not be
	executed directly.

2013-06-18  Darshit Shah  <darnir@gmail.com>

	* Makefile.am: Set evironment variable MAKE_CHECK to identify that the
	tests are being run through make check.
	* ColourTerm.py (printer): If MAKE_CHECK is set, we do not want to
	print ANSI Escape sequences since the output will be redirected to a
	log file not a terminal.

2013-06-17  Darshit Shah  <darnir@gmail.com>

	* Test-O: (newfile)
	Test Case for use of -O command with Wget
	* Test-stdouterr: (newfile)
	Test Case for when disk runs out of space preventing Wget from
	writing to disk.

2013-06-17  Darshit Shah  <darnir@gmail.com>

	* Makefile.am: (newfile)
	Create a basic Makefile.am to use the Test Harness provided by
	automake.

2013-06-17  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py (__serve_on_port): Delete this internal function.
	(initServer): Delete this public method that used to call
	__serve_on_port().
	(create_server): Create and return an instance of StoppableHTTPServer.
	We also use a random port number now that is assigned by the kernel.
	(spawn_server): Create a new non-blocking process on which the server
	serves.
	(mk_file_sys): Set the File System on the server from which it must
	serve files. This method MUST be called before spawn_server(), else
	the process will not copy the File System data.
	* TestEnv.py (start_server): Move into the class Test. We no longer
	spawn a new process for the Server here. Simply call create_server()
	and generate the domain name using the port number automatically
	assigned by the kernel.
	(spawn_server): Call the spawn_server() method in HTTPServer.
	(stop_server): Move the method into class Test.
	(gen_file_list): Use the domain name generated by start_server instead
	of hardcoding it.
	* runTest.py: Change the function calls to reflect the methods edited
	in TestEnv.py

2013-06-16  Darshit Shah  <darnir@gmail.com>

	* TestEnv.py (__init__): Handle xml.etree.ElementTree.ParseError in
	file and raise TestFailed Exception. This is done to hide the
	implementation details from the runTest module.
	* runTest.py: Handle the TestFailed exception instead of the
	implementaation specific ParseError. Remove the dependency on xml
	module.

2013-06-15  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py (send_head): Create a common function for processing
	the response headers to HEAD and GET requests.
	(do_GET): Remove response header processing code. This is shifted to
	send_head.
	(do_HEAD): Handle HEAD requests

2013-06-13  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py(StoppableHTTPRequestHandler): Support HTTP/1.1
	protocol.

2013-06-13  Darshit Shah  <darnir@gmail.com>

	* TestEnv.py(test_downloaded_files): Print a diff on content mismatch
	* runTest.py: Change import statement. Using the full name helps in
	creating more manageable code.

2013-06-13  Darshit Shah  <darnir@gmail.com>

	* TestEnv.py: Define a new class Test. Objects of this class are used
	to handle each TestCase file separately. This class combines code from
	the runTest module and certain functions originally a part of this
	module. The use of a class here helps in improving modularity and
	keeping the code cleaner. It is also now very easily possible to
	extend the tests in special cases.
	* TestProto: Change semantics, the download attribute *MUST* be
	explicitly set to False to prevent the file from being downloaded
	explicitly.
	* runTest.py: Reduce dependencies. Remove code that will parse the XML
	file and run the checks for Test passing. This code is now merged into
	the Test Class.

2013-06-13  Darshit Shah  <darnir@gmail.com>

	* TestEnv.py: Handle an exception in the case that the files from the
	previous run of the test were not cleaned up.

2013-06-12  Darshit Shah  <darnir@gmail.com>

	* TestProto: Add attribute, orig to specify original name of an
	expected file. This is used when Wget changes the name of the file
	when downloading. E.g.: The -O switch. If the attribute is skipped,
	the same name as the expected name is used.
	* runTest.py: Changed expectedFiles to a dict(). It now stores the
	name of the expected file and the corresponding Orginal File name with
	which to compare the file contents.

2013-06-12  Darshit Shah  <darnir@gmail.com>

	* TestProto: Add attribute, download to InputFile. Every file on the
	server should not be explicitly downloaded by Wget. The download
	attribute must be explicitly set to "True" to download the file. Else
	it will be ignored.
	* runTest.py: Add only those URLs which are explicitly marked for
	download.

2013-06-11  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py: Remove trailing whitespace.
	* runTest.py: Split function definitions to a separate file. Add
	support for checking if Wget downloaded any extra files during the
	test.
	* TestEnv.py: (newfile)
	Move start_server() and stop_server() functions from runTest module.
	Define init_test_env() to Parse the XML File and return the Root
	Node. Also create new directory for test files to be stored and
	navigate to the said location.

2013-06-11  Darshit Shah  <darnir@gmail.com>

	* ColourTerm.py: Remove trailing whitespaces
	* CommitLog: Same

2013-06-10  Darshit Shah  <darnir@gmail.com>

	* runTest.py: Delete the downloaded files from disk after test is
	over.

2013-06-10  Darshit Shah  <darnir@gmail.com>

	* ColourTerm.py: Make a call to print() directly if not on Linux.

2013-06-10  Darshit Shah  <darnir@gmail.com>

	* TestProto: Edit the format of the InputFile Element. This make for
	bad-formatting but is required to eliminate the extra newlines that
	appear otherwise. I do not wish to touch the InputFile and
	programmatically remove those newlines.
	* runTest.py: Stop the server immediately after making the call to
	Wget. This also fixes a bug wherein multiple server instances would be
	created if multiple TestFiles are given at invokation.
	Add more checks to determine if test was successful. Check if Expected
	downloaded files exist and their contents match.

2013-06-10  Darshit Shah  <darnir@gmail.com>

	* ColourTerm.py: (newfile)
	A new module that handles colourizing the terminal output. Written
	from scratch. This module currently supports only *nix platforms.
	Support for Windows coloured output will be added later when required.
	I will also probably override the logger class one day to colourize
	it's output from the HTTPServer.
	* runTest.py: Use the new printer() function to print coloured putput
	to screen.

2013-06-09  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py (do_GET): Make the server respond with a file from the
	fileSys dict instead of serving from the current directory. This
	completes a major part of the Test Server. Only part remaining is
	checking whether test was successful.
	* HTTPServer.py (initServer): Add statement to make fileSys a global
	variable.
	* runTest.py: Remove a debugging print statement.
	* TestProto: (tiny change)
	Modify options to something more sane for testing output.
	Add a missing expected File.

2013-06-09  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py: Define fileSys as a Global variable storing a Dict.
	* runTest.py: Switch from using a list to store input file contents to
	a dictionary. This allows us to store filename:content as a key:value
	pair. This is a better option than using a 2D List to implement the
	same thing.

2013-06-09  Darshit Shah  <darnir@gmail.com>

	* runTest.py: Instead of using a List and appending to it, construct a
	String. While this may be the longer way around, it handles multiple
	options in a single Element Tag rather nicely.
	Yet, the call to sleep(2) comes back. it seems that making an early to
	the server isn't enough, not yet. The output is pretty erratic
	depending on the load on the machine and that is not acceptble.
	* TestProto: Correct the usage of -O command. This was flawed earlier,
	but this commit fixes it. Also, show how multiple commands may be
	clubbed inside a single Option element.

2013-06-08  Darshit Shah  <darnir@gmail.com>

	* runTest.py: Make the call to start_server() as early as possible so
	as to provide more time for the server to initialize before we make
	the call to Wget. This eliminates the need for a sleep(2) statement.

2013-06-08  Darshit Shah  <darnir@gmail.com>

	* runTest.py: Read the list of expected files to be downloaded and
	generate a list. The actual test for the files is not yet implemented
	and will be implemented later.
	* TestProto: Add a new element, File. This elemenent defines the names
	of the files that are expected to be downloaded by Wget. Only one file
	per element.

2013-06-07  Darshit Shah  <darnir@gmail.com>

	* runTest.py: Read the Expected Return Code, the actual Return Code
	and compare to identify whether the Test was successful or not. We
	must also test the files being returned for a complete test. However,
	this is to be implemented next.
	Edit the Exit Code when the script fails due to non-existing file to
	24. This is done so as not to interfere with the standard return codes
	of Wget. The number was chosen arbitrarily.
	Make the script exit with the return code that Wget returns. This will
	be used later when a runAll module is implemented.

2013-06-07  Darshit Shah  <darnir@gmail.com>

	* runTest.py: Build the command line that is to be executed in a List.
	Build the list of URLs also and append to the commandline list.
	Pass the last to a sys.call() function and execute Wget.
	* TestProto: Rename Options to Option, to correctly reflect that it
	can take only one Option between each Element.
	Add 2 more options to demostrate how sending multiple options works.
	** Maybe, an interactive script should be written to generate Test
	Files? **

2013-06-06  Darshit Shah  <darnir@gmail.com>

	* runTest.py: Add a check to ensure that the Filename passed to the
	script actually exists. Else, exit.

2013-06-06  Darshit Shah  <darnir@gmail.com>

	* TestProto: Add an attribute name to InputFile.
	Add a second File to demonstrate how multiple input files can work.
	* runTest.py: Remove hard-coded link to Root[0]. Instead read parse
	tree and find all input Files.

2013-06-06  Darshit Shah  <darnir@gmail.com>

	* TestProto: Add New element, Options. This element defines the list
	of command line arguments to be passed to Wget on invokation.

2013-06-06  Darshit Shah  <darnir@gmail.com>

	* runTest.py: Generate path to local build of Wget.

2013-06-06  Darshit Shah  <darnir@gmail.com>

	* runTest.py: Improve automation. Read file name from command line and
	use that as a Test Case. Some requirements are marked as TODO in
	comments.
	* HTTPServer.py (initServer): Add support to accept File details that
	will be used by the Server.

2013-06-06  Darshit Shah  <darnir@gmail.com>

	* TestProto: Minor Changes. Most importantly surround HTML syntax in
	CDATA to prevent them from being read as XML Tags. This is required
	since the TestProto file is read as a valid XML Document.
	* IMPORTANT *: The TestProto file must always be maintained as a valid
	XML File, since the parsing engine expects it to be so.

2013-06-05  Darshit Shah  <darnir@gmail.com>

	* runTests.py: Add Responsibilities that this file must handle as a
	comment. No new feature / functionality.

2013-06-05  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py: Add new classes, StoppableHTTPRequestHandler and
	StoppableHTTPServer that extend the standard classes. These classes
	provide a new method, QUIT which is used to exit the running server.
	* runTests.py (stop_server): Define new function that sends a HTTP
	QUIT Request to the Server to exit it.
	* runTests.py: Spawn the Server in a new process and return control to
	the parent.
	The Server currently runs for only 10 seconds. This will be removed as
	automation to run TestFiles is added later.

2013-06-04  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py: Convert previous functions to private and create a
	public Caller method. This brings the Server more in-line with it's
	final working.
	* runTests.py: (newfile)
	Currently it simply initializes a new HTTPServer. If multiple servers
	need to be spawned, this may be the right place to do it.

2013-06-04  Darshit Shah  <darnir@gmail.com>

	* TestProto: (newfile)
	A Prototype file that shows how the test cases should be defined.
	Ideally, this file should be copied and edited to write new test
	cases.
	This file will be edited and enchanced as and when required.

2013-06-04  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py: Comment out Threading Code. We do not need multiple
	servers as yet.
	Edit the server port to a sane vale of 8090.
	Return the correct Content-Length header in a GET Response.
	Make the server serve from the current directory instead.
	Edit the 404 Response message to "Not Found"

2013-06-03  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py: (newfile)
	Adds a new basic HTTP Server.
	This commit introduces a new HTTP Server that serves on port 1111 and
	2222 through two threads. This will allow atleast two tests to run
	simultaneously.
	The HTTP Server serves local files from the root directory.
	Currently, this Server supports only the HTTP GET Request and returns
	only a 200 OK Status or a 404 Not Found.
	Initial support for POST Requests is being implemented.
	* README: (newfile)
	Adds a README file for basic documentation about the test suite.
	* CommitLog: (newfile)
	This File
