Detailed explanations on the working of each commit.

This file will remain only on the working branch of the development and will not be copied
into the release commits.

The CommitLog file will follow the same conventions as the GNU ChangeLog files.

2013-06-18  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py (set_server_rules): Accept various information for
	configuring the server.
	(send_redirection): Handle sending redirect requests
	(send_HEAD): Test if redirection is necessary and act appropriately
	(send_POST): Samie
	* TestEnv.py (parse_special): Parse special requests from the Test
	File. Currently it only supports reading Redirection requests

2013-06-18  Darshit Shah  <darnir@gmail.com>

	* runTest.py: Exit driver module with highest exit status.
	  0  Successful
	 77  Skipped Test
	 99  Hard Error (Error in Test Suite, not Wget)
	100  Test Failed
	These exit numbers are teken from the automake documentation.

2013-06-18  Darshit Shah  <darnir@gmail.com>

	* ColourTerm.py: Fix indentation to 3 spaces. Follow GNU Coding Style
	better.
	* HTTPServer.py: Same
	* TestEnv.py: Same
	* runTest.py: Same

2013-06-18  Darshit Shah  <darnir@gmail.com>

	* runTest.py: Change shebang line to python3
	* HTTPServer.py: Remove shebang line. Change chmod mask to 644. This
	file will not be executed directly.
	* ColourTerm.py: Change chmod mask to 644. This file will not be
	executed directly.

2013-06-18  Darshit Shah  <darnir@gmail.com>

	* Makefile.am: Set evironment variable MAKE_CHECK to identify that the
	tests are being run through make check.
	* ColourTerm.py (printer): If MAKE_CHECK is set, we do not want to
	print ANSI Escape sequences since the output will be redirected to a
	log file not a terminal.

2013-06-17  Darshit Shah  <darnir@gmail.com>

	* Test-O: (newfile)
	Test Case for use of -O command with Wget
	* Test-stdouterr: (newfile)
	Test Case for when disk runs out of space preventing Wget from
	writing to disk.

2013-06-17  Darshit Shah  <darnir@gmail.com>

	* Makefile.am: (newfile)
	Create a basic Makefile.am to use the Test Harness provided by
	automake.

2013-06-17  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py (__serve_on_port): Delete this internal function.
	(initServer): Delete this public method that used to call
	__serve_on_port().
	(create_server): Create and return an instance of StoppableHTTPServer.
	We also use a random port number now that is assigned by the kernel.
	(spawn_server): Create a new non-blocking process on which the server
	serves.
	(mk_file_sys): Set the File System on the server from which it must
	serve files. This method MUST be called before spawn_server(), else
	the process will not copy the File System data.
	* TestEnv.py (start_server): Move into the class Test. We no longer
	spawn a new process for the Server here. Simply call create_server()
	and generate the domain name using the port number automatically
	assigned by the kernel.
	(spawn_server): Call the spawn_server() method in HTTPServer.
	(stop_server): Move the method into class Test.
	(gen_file_list): Use the domain name generated by start_server instead
	of hardcoding it.
	* runTest.py: Change the function calls to reflect the methods edited
	in TestEnv.py

2013-06-16  Darshit Shah  <darnir@gmail.com>

	* TestEnv.py (__init__): Handle xml.etree.ElementTree.ParseError in
	file and raise TestFailed Exception. This is done to hide the
	implementation details from the runTest module.
	* runTest.py: Handle the TestFailed exception instead of the
	implementaation specific ParseError. Remove the dependency on xml
	module.

2013-06-15  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py (send_head): Create a common function for processing
	the response headers to HEAD and GET requests.
	(do_GET): Remove response header processing code. This is shifted to
	send_head.
	(do_HEAD): Handle HEAD requests

2013-06-13  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py(StoppableHTTPRequestHandler): Support HTTP/1.1
	protocol.

2013-06-13  Darshit Shah  <darnir@gmail.com>

	* TestEnv.py(test_downloaded_files): Print a diff on content mismatch
	* runTest.py: Change import statement. Using the full name helps in
	creating more manageable code.

2013-06-13  Darshit Shah  <darnir@gmail.com>

	* TestEnv.py: Define a new class Test. Objects of this class are used
	to handle each TestCase file separately. This class combines code from
	the runTest module and certain functions originally a part of this
	module. The use of a class here helps in improving modularity and
	keeping the code cleaner. It is also now very easily possible to
	extend the tests in special cases.
	* TestProto: Change semantics, the download attribute *MUST* be
	explicitly set to False to prevent the file from being downloaded
	explicitly.
	* runTest.py: Reduce dependencies. Remove code that will parse the XML
	file and run the checks for Test passing. This code is now merged into
	the Test Class.

2013-06-13  Darshit Shah  <darnir@gmail.com>

	* TestEnv.py: Handle an exception in the case that the files from the
	previous run of the test were not cleaned up.

2013-06-12  Darshit Shah  <darnir@gmail.com>

	* TestProto: Add attribute, orig to specify original name of an
	expected file. This is used when Wget changes the name of the file
	when downloading. E.g.: The -O switch. If the attribute is skipped,
	the same name as the expected name is used.
	* runTest.py: Changed expectedFiles to a dict(). It now stores the
	name of the expected file and the corresponding Orginal File name with
	which to compare the file contents.

2013-06-12  Darshit Shah  <darnir@gmail.com>

	* TestProto: Add attribute, download to InputFile. Every file on the
	server should not be explicitly downloaded by Wget. The download
	attribute must be explicitly set to "True" to download the file. Else
	it will be ignored.
	* runTest.py: Add only those URLs which are explicitly marked for
	download.

2013-06-11  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py: Remove trailing whitespace.
	* runTest.py: Split function definitions to a separate file. Add
	support for checking if Wget downloaded any extra files during the
	test.
	* TestEnv.py: (newfile)
	Move start_server() and stop_server() functions from runTest module.
	Define init_test_env() to Parse the XML File and return the Root
	Node. Also create new directory for test files to be stored and
	navigate to the said location.

2013-06-11  Darshit Shah  <darnir@gmail.com>

	* ColourTerm.py: Remove trailing whitespaces
	* CommitLog: Same

2013-06-10  Darshit Shah  <darnir@gmail.com>

	* runTest.py: Delete the downloaded files from disk after test is
	over.

2013-06-10  Darshit Shah  <darnir@gmail.com>

	* ColourTerm.py: Make a call to print() directly if not on Linux.

2013-06-10  Darshit Shah  <darnir@gmail.com>

	* TestProto: Edit the format of the InputFile Element. This make for
	bad-formatting but is required to eliminate the extra newlines that
	appear otherwise. I do not wish to touch the InputFile and
	programmatically remove those newlines.
	* runTest.py: Stop the server immediately after making the call to
	Wget. This also fixes a bug wherein multiple server instances would be
	created if multiple TestFiles are given at invokation.
	Add more checks to determine if test was successful. Check if Expected
	downloaded files exist and their contents match.

2013-06-10  Darshit Shah  <darnir@gmail.com>

	* ColourTerm.py: (newfile)
	A new module that handles colourizing the terminal output. Written
	from scratch. This module currently supports only *nix platforms.
	Support for Windows coloured output will be added later when required.
	I will also probably override the logger class one day to colourize
	it's output from the HTTPServer.
	* runTest.py: Use the new printer() function to print coloured putput
	to screen.

2013-06-09  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py (do_GET): Make the server respond with a file from the
	fileSys dict instead of serving from the current directory. This
	completes a major part of the Test Server. Only part remaining is
	checking whether test was successful.
	* HTTPServer.py (initServer): Add statement to make fileSys a global
	variable.
	* runTest.py: Remove a debugging print statement.
	* TestProto: (tiny change)
	Modify options to something more sane for testing output.
	Add a missing expected File.

2013-06-09  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py: Define fileSys as a Global variable storing a Dict.
	* runTest.py: Switch from using a list to store input file contents to
	a dictionary. This allows us to store filename:content as a key:value
	pair. This is a better option than using a 2D List to implement the
	same thing.

2013-06-09  Darshit Shah  <darnir@gmail.com>

	* runTest.py: Instead of using a List and appending to it, construct a
	String. While this may be the longer way around, it handles multiple
	options in a single Element Tag rather nicely.
	Yet, the call to sleep(2) comes back. it seems that making an early to
	the server isn't enough, not yet. The output is pretty erratic
	depending on the load on the machine and that is not acceptble.
	* TestProto: Correct the usage of -O command. This was flawed earlier,
	but this commit fixes it. Also, show how multiple commands may be
	clubbed inside a single Option element.

2013-06-08  Darshit Shah  <darnir@gmail.com>

	* runTest.py: Make the call to start_server() as early as possible so
	as to provide more time for the server to initialize before we make
	the call to Wget. This eliminates the need for a sleep(2) statement.

2013-06-08  Darshit Shah  <darnir@gmail.com>

	* runTest.py: Read the list of expected files to be downloaded and
	generate a list. The actual test for the files is not yet implemented
	and will be implemented later.
	* TestProto: Add a new element, File. This elemenent defines the names
	of the files that are expected to be downloaded by Wget. Only one file
	per element.

2013-06-07  Darshit Shah  <darnir@gmail.com>

	* runTest.py: Read the Expected Return Code, the actual Return Code
	and compare to identify whether the Test was successful or not. We
	must also test the files being returned for a complete test. However,
	this is to be implemented next.
	Edit the Exit Code when the script fails due to non-existing file to
	24. This is done so as not to interfere with the standard return codes
	of Wget. The number was chosen arbitrarily.
	Make the script exit with the return code that Wget returns. This will
	be used later when a runAll module is implemented.

2013-06-07  Darshit Shah  <darnir@gmail.com>

	* runTest.py: Build the command line that is to be executed in a List.
	Build the list of URLs also and append to the commandline list.
	Pass the last to a sys.call() function and execute Wget.
	* TestProto: Rename Options to Option, to correctly reflect that it
	can take only one Option between each Element.
	Add 2 more options to demostrate how sending multiple options works.
	** Maybe, an interactive script should be written to generate Test
	Files? **

2013-06-06  Darshit Shah  <darnir@gmail.com>

	* runTest.py: Add a check to ensure that the Filename passed to the
	script actually exists. Else, exit.

2013-06-06  Darshit Shah  <darnir@gmail.com>

	* TestProto: Add an attribute name to InputFile.
	Add a second File to demonstrate how multiple input files can work.
	* runTest.py: Remove hard-coded link to Root[0]. Instead read parse
	tree and find all input Files.

2013-06-06  Darshit Shah  <darnir@gmail.com>

	* TestProto: Add New element, Options. This element defines the list
	of command line arguments to be passed to Wget on invokation.

2013-06-06  Darshit Shah  <darnir@gmail.com>

	* runTest.py: Generate path to local build of Wget.

2013-06-06  Darshit Shah  <darnir@gmail.com>

	* runTest.py: Improve automation. Read file name from command line and
	use that as a Test Case. Some requirements are marked as TODO in
	comments.
	* HTTPServer.py (initServer): Add support to accept File details that
	will be used by the Server.

2013-06-06  Darshit Shah  <darnir@gmail.com>

	* TestProto: Minor Changes. Most importantly surround HTML syntax in
	CDATA to prevent them from being read as XML Tags. This is required
	since the TestProto file is read as a valid XML Document.
	* IMPORTANT *: The TestProto file must always be maintained as a valid
	XML File, since the parsing engine expects it to be so.

2013-06-05  Darshit Shah  <darnir@gmail.com>

	* runTests.py: Add Responsibilities that this file must handle as a
	comment. No new feature / functionality.

2013-06-05  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py: Add new classes, StoppableHTTPRequestHandler and
	StoppableHTTPServer that extend the standard classes. These classes
	provide a new method, QUIT which is used to exit the running server.
	* runTests.py (stop_server): Define new function that sends a HTTP
	QUIT Request to the Server to exit it.
	* runTests.py: Spawn the Server in a new process and return control to
	the parent.
	The Server currently runs for only 10 seconds. This will be removed as
	automation to run TestFiles is added later.

2013-06-04  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py: Convert previous functions to private and create a
	public Caller method. This brings the Server more in-line with it's
	final working.
	* runTests.py: (newfile)
	Currently it simply initializes a new HTTPServer. If multiple servers
	need to be spawned, this may be the right place to do it.

2013-06-04  Darshit Shah  <darnir@gmail.com>

	* TestProto: (newfile)
	A Prototype file that shows how the test cases should be defined.
	Ideally, this file should be copied and edited to write new test
	cases.
	This file will be edited and enchanced as and when required.

2013-06-04  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py: Comment out Threading Code. We do not need multiple
	servers as yet.
	Edit the server port to a sane vale of 8090.
	Return the correct Content-Length header in a GET Response.
	Make the server serve from the current directory instead.
	Edit the 404 Response message to "Not Found"

2013-06-03  Darshit Shah  <darnir@gmail.com>

	* HTTPServer.py: (newfile)
	Adds a new basic HTTP Server.
	This commit introduces a new HTTP Server that serves on port 1111 and
	2222 through two threads. This will allow atleast two tests to run
	simultaneously.
	The HTTP Server serves local files from the root directory.
	Currently, this Server supports only the HTTP GET Request and returns
	only a 200 OK Status or a 404 Not Found.
	Initial support for POST Requests is being implemented.
	* README: (newfile)
	Adds a README file for basic documentation about the test suite.
	* CommitLog: (newfile)
	This File
